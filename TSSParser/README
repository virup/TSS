What's done
-----------
1) All the functions are implemented. Following steps are performed
a) Check grammar syntax
b) Build a grammar tree
c) Given a path of type string, break up its component; traverse the given path in tree, and collect the access codes. Store
all this information in vector<PathComponent>
d) genAccessCode() - make a copy of accesscodes in to int vector and return it
e) Mini functions which returns true if the last object in a give path is BO, RO, SO, or LIST. Note that 
List is independent i.e (BO &&  List), (SO && List), or (RO && List) is possible. Other combinations are not possible
f) finally return type of the last object of a given path, if that path is of type BO. 
Undefined is returned if the object is not of type BO.

Things to do
------------
1) Accept grammar from File
2) Fix bugs (if found)
3) Cleaning up!!! Right now, we have memory leak because grammar tree is not freed

Bugs
-----
If any bugs are found, contact me at archesh5001@gmail.com


To run this program, enter following commands

$ make
$ ./test.out

Output of the given grammar in test.cc is as follow
---------------------------------------------------

Building individual tree
Building done
Linking started
Linking done
Storing access code
Path: StructureObject->Object1->Object1Structure->Object1StructureBase
Access codes: 0:0:1:0
Is BO? 1
Is SO? 0
Is List? 1
Is RO? 0
Type: 1

To edit the grammar, open test.cc
Change grammar that is passed through the constructor

-Archesh